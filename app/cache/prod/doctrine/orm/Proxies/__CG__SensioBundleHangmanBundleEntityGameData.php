<?php

namespace Proxies\__CG__\Sensio\Bundle\HangmanBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class GameData extends \Sensio\Bundle\HangmanBundle\Entity\GameData implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setPlayer(\Sensio\Bundle\HangmanBundle\Entity\Player $player)
    {
        $this->__load();
        return parent::setPlayer($player);
    }

    public function getPlayer()
    {
        $this->__load();
        return parent::getPlayer();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setToken($token)
    {
        $this->__load();
        return parent::setToken($token);
    }

    public function getToken()
    {
        $this->__load();
        return parent::getToken();
    }

    public function setWord($word)
    {
        $this->__load();
        return parent::setWord($word);
    }

    public function getWord()
    {
        $this->__load();
        return parent::getWord();
    }

    public function setAttempts($attempts)
    {
        $this->__load();
        return parent::setAttempts($attempts);
    }

    public function getAttempts()
    {
        $this->__load();
        return parent::getAttempts();
    }

    public function setTriedLetters(array $triedLetters)
    {
        $this->__load();
        return parent::setTriedLetters($triedLetters);
    }

    public function getTriedLetters()
    {
        $this->__load();
        return parent::getTriedLetters();
    }

    public function setFoundLetters(array $foundLetters)
    {
        $this->__load();
        return parent::setFoundLetters($foundLetters);
    }

    public function getFoundLetters()
    {
        $this->__load();
        return parent::getFoundLetters();
    }

    public function setScore($score)
    {
        $this->__load();
        return parent::setScore($score);
    }

    public function getScore()
    {
        $this->__load();
        return parent::getScore();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setStartAt($startAt)
    {
        $this->__load();
        return parent::setStartAt($startAt);
    }

    public function getStartAt()
    {
        $this->__load();
        return parent::getStartAt();
    }

    public function setEndAt($endAt)
    {
        $this->__load();
        return parent::setEndAt($endAt);
    }

    public function getEndAt()
    {
        $this->__load();
        return parent::getEndAt();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'token', 'word', 'attempts', 'triedLetters', 'foundLetters', 'score', 'status', 'startAt', 'endAt', 'player');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}